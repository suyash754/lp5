//Bully.java 
 
import java.util.Scanner; 
 
public class Bully  
{ 
    static boolean[] state = new boolean[6];  
    static int coordinator; 
 
    public static void up(int up)  
    { 
        if (state[up - 1])  
        { 
            System.out.println("Process " + up + " is already up"); 
        } else { 
            state[up - 1] = true; 
            System.out.println("Process " + up + " held election"); 
            for (int i = up; i < 5; i++)  
            { 
                System.out.println("Election message sent from process " + up + " to process " + (i + 1)); 
            } 
            for (int i = 4; i >= 0; i--)  
            { 
                if (!state[i]) continue; 
                System.out.println("Alive message sent from process " + (i + 1) + " to process " + up); 
                coordinator = i + 1; 
                break; 
            } 
        } 
    } 
    public static void down(int down)  
    { 
        if (!state[down - 1])  
        { 
            System.out.println("Process " + down + " is already down!"); 
        } else { 
            state[down - 1] = false; 
            System.out.println("Process " + down + " is down."); 
        } 
    } 
    public static void mess(int mess)  
    { 
        if (!state[mess - 1])  
        { 
            System.out.println("Process is down"); 
        }  
        else  
        { 
            System.out.println("Process " + mess + " sent an election message"); 
            for (int i = mess; i < 5; i++)  
            { 
                System.out.println("Election message sent from process " + mess + " to process " + (i + 
1)); 
            } 
            System.out.println("Coordinator message sent from process " + coordinator + " to all"); 
        } 
    } 
 
    public static void main(String[] args)  
    { 
        Scanner sc = new Scanner(System.in); 
        for (int i = 0; i < 5; i++)  
        { 
            state[i] = true; 
        } 
        coordinator = 5; 
        System.out.println("5 active processes are: p1 p2 p3 p4 p5"); 
        System.out.println("Process 5 is the coordinator"); 
 
        while (true)  
        { 
            System.out.println("\n1. Up a process\n2. Down a process\n3. Send a message\n4. Exit"); 
            int choice = sc.nextInt(); 
            switch (choice)  
            { 
                case 1: 
                    System.out.println("Enter process number to bring up:"); 
                    int up = sc.nextInt(); 
                    up(up); 
                    break; 
                case 2: 
                    System.out.println("Enter process number to bring down:"); 
                    int down = sc.nextInt(); 
                    down(down); 
                    break; 
                case 3: 
                    System.out.println("Enter process number to send a message:"); 
                    int mess = sc.nextInt(); 
                    mess(mess); 
                    break; 
                case 4: 
                    System.out.println("Exiting..."); 
                    sc.close(); 
                    return; 
                default: 
                    System.out.println("Invalid choice, try again."); 
            } 
        } 
    } 
}


//Ring.java 
 
import java.util.Scanner; 
 
class Process { 
    int id; 
    boolean active; 
 
    Process(int id) { 
        this.id = id; 
        this.active = true; 
    } 
} 
 
public class Ring { 
    static Process[] processes; 
    static int n; 
 
    public static void main(String[] args) { 
        Scanner in = new Scanner(System.in); 
 
        // Step 1: Initialize Processes 
        System.out.print("Enter number of processes: "); 
        n = in.nextInt(); 
        processes = new Process[n]; 
 
        System.out.println("Enter process IDs:"); 
        for (int i = 0; i < n; i++) { 
            processes[i] = new Process(in.nextInt()); 
        } 
 
        int choice; 
        do { 
            System.out.println("\nMENU:"); 
            System.out.println("1. Start Election"); 
            System.out.println("2. Exit"); 
            System.out.print("Enter your choice: "); 
            choice = in.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter process index (0-" + (n - 1) + ") to start election: "); 
                    int initiator = in.nextInt(); 
                    startElection(initiator); 
                    break; 
                case 2: 
                    System.out.println("Exiting..."); 
                    break; 
                default: 
                    System.out.println("Invalid choice! Try again."); 
                } while (choice != 2); 
 
                in.close(); 
            } 
         
            static void startElection(int initiator) { 
                int coordinator = -1; 
                System.out.println("\nElection started by Process " + processes[initiator].id); 
         
                int i = initiator; 
                do { 
                    int next = (i + 1) % n; // Move to the next process in the ring 
                    if (processes[next].active) { 
                        System.out.println("Process " + processes[i].id + " sends message to Process " + 
        processes[next].id); 
                        coordinator = Math.max(coordinator, processes[next].id); 
                    } 
                    i = next; 
                } while (i != initiator); // Complete one full cycle 
         
                System.out.println("\nProcess " + coordinator + " is elected as Coordinator."); 
            } 
    } 
}